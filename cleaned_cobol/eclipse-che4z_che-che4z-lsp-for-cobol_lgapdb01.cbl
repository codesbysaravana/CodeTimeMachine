PROCESS SQL
IDENTIFICATION DIVISION.
PROGRAM-ID. LGAPDB01.
ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
DATA DIVISION.
WORKING-STORAGE SECTION.
01  WS-HEADER.
03 WS-EYECATCHER            PIC X(16)
VALUE 'LGAPDB01------WS'.
03 WS-TRANSID               PIC X(4).
03 WS-TERMID                PIC X(4).
03 WS-TASKNUM               PIC 9(7).
03 WS-FILLER                PIC X.
03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
03 WS-CALEN                 PIC S9(4) COMP.
01  ABS-TIME                    PIC S9(8) COMP VALUE +0.
01  TIME1                       PIC X(8)  VALUE SPACES.
01  DATE1                       PIC X(10) VALUE SPACES.
01  ERROR-MSG.
03 EM-DATE                  PIC X(8)  VALUE SPACES.
03 FILLER                   PIC X     VALUE SPACES.
03 EM-TIME                  PIC X(6)  VALUE SPACES.
03 FILLER                   PIC X(9)  VALUE ' LGAPDB01'.
03 EM-VARIABLE.
05 FILLER                 PIC X(6)  VALUE ' CNUM='.
05 EM-CUSNUM              PIC X(10)  VALUE SPACES.
05 FILLER                 PIC X(6)  VALUE ' PNUM='.
05 EM-POLNUM              PIC X(10)  VALUE SPACES.
05 EM-SQLREQ              PIC X(16) VALUE SPACES.
05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
01  CA-ERROR-MSG.
03 FILLER                   PIC X(9)  VALUE 'COMMAREA='.
03 CA-DATA                  PIC X(90) VALUE SPACES.
01  WS-COMMAREA-LENGTHS.
03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +28.
03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
01 WS-VARY-FIELD.
49 WS-VARY-LEN               PIC S9(4) COMP.
49 WS-VARY-CHAR              PIC X(3900).
EXEC SQL
INCLUDE LGPOLICY
END-EXEC.
01 DB2-IN-INTEGERS.
03 DB2-CUSTOMERNUM-INT      PIC S9(9) COMP.
03 DB2-BROKERID-INT         PIC S9(9) COMP.
03 DB2-PAYMENT-INT          PIC S9(9) COMP.
03 DB2-E-TERM-SINT          PIC S9(4) COMP.
03 DB2-E-SUMASSURED-INT     PIC S9(9) COMP.
03 DB2-E-PADDING-LEN        PIC S9(9) COMP.
03 DB2-H-BEDROOMS-SINT      PIC S9(4) COMP.
03 DB2-H-VALUE-INT          PIC S9(9) COMP.
03 DB2-M-VALUE-INT          PIC S9(9) COMP.
03 DB2-M-CC-SINT            PIC S9(4) COMP.
03 DB2-M-PREMIUM-int        PIC S9(9) COMP.
03 DB2-M-ACCIDENTS-int      PIC S9(9) COMP.
03 DB2-B-FirePeril-Int      PIC S9(4) COMP.
03 DB2-B-FirePremium-Int    PIC S9(9) COMP.
03 DB2-B-CrimePeril-Int     PIC S9(4) COMP.
03 DB2-B-CrimePremium-Int   PIC S9(9) COMP.
03 DB2-B-FloodPeril-Int     PIC S9(4) COMP.
03 DB2-B-FloodPremium-Int   PIC S9(9) COMP.
03 DB2-B-WeatherPeril-Int   PIC S9(4) COMP.
03 DB2-B-WeatherPremium-Int PIC S9(9) COMP.
03 DB2-B-Status-Int         PIC S9(4) COMP.
03 DB2-C-Policynum-Int      PIC S9(9) COMP.
03 DB2-C-Num-INT            PIC S9(9) COMP Value +0.
03 DB2-C-Paid-INT           PIC S9(9) COMP.
03 DB2-C-Value-INT          PIC S9(9) COMP.
01 DB2-OUT-INTEGERS.
03 DB2-POLICYNUM-INT        PIC S9(9) COMP VALUE +0.
01  LGAPVS01                    PIC X(8)  VALUE 'LGAPVS01'.
EXEC SQL
INCLUDE SQLCA
END-EXEC.
LINKAGE SECTION.
01  DFHCOMMAREA.
EXEC SQL
INCLUDE LGCMAREA
END-EXEC.
PROCEDURE DIVISION.
MAINLINE SECTION.
INITIALIZE WS-HEADER.
MOVE EIBTRNID TO WS-TRANSID.
MOVE EIBTRMID TO WS-TERMID.
MOVE EIBTASKN TO WS-TASKNUM.
MOVE EIBCALEN TO WS-CALEN.
INITIALIZE DB2-IN-INTEGERS.
INITIALIZE DB2-OUT-INTEGERS.
IF EIBCALEN IS EQUAL TO ZERO
MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
PERFORM WRITE-ERROR-MESSAGE
EXEC CICS ABEND ABCODE('LGCA') NODUMP END-EXEC
END-IF
MOVE '00' TO CA-RETURN-CODE
SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
MOVE CA-CUSTOMER-NUM TO DB2-CUSTOMERNUM-INT
MOVE CA-POLICY-NUM   TO DB2-C-PolicyNum-INT
MOVE CA-CUSTOMER-NUM TO EM-CUSNUM
ADD WS-CA-HEADER-LEN TO WS-REQUIRED-CA-LEN
EVALUATE CA-REQUEST-ID
WHEN '01AEND'
ADD WS-FULL-ENDOW-LEN TO WS-REQUIRED-CA-LEN
MOVE 'E' TO DB2-POLICYTYPE
WHEN '01AHOU'
ADD WS-FULL-HOUSE-LEN TO WS-REQUIRED-CA-LEN
MOVE 'H' TO DB2-POLICYTYPE
WHEN '01AMOT'
ADD WS-FULL-MOTOR-LEN TO WS-REQUIRED-CA-LEN
MOVE 'M' TO DB2-POLICYTYPE
WHEN '01ACOM'
MOVE 'C' TO DB2-POLICYTYPE
WHEN '01ACLM'
MOVE 'X' TO DB2-POLICYTYPE
WHEN OTHER
MOVE '99' TO CA-RETURN-CODE
EXEC CICS RETURN END-EXEC
END-EVALUATE
IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
MOVE '98' TO CA-RETURN-CODE
EXEC CICS RETURN END-EXEC
END-IF
If CA-REQUEST-ID Not = '01ACLM'
PERFORM INSERT-POLICY
End-If
EVALUATE CA-REQUEST-ID
WHEN '01AEND'
PERFORM INSERT-ENDOW
WHEN '01AHOU'
PERFORM INSERT-HOUSE
WHEN '01AMOT'
PERFORM INSERT-MOTOR
WHEN '01ACOM'
PERFORM INSERT-COMMERCIAL
WHEN '01ACLM'
PERFORM INSERT-CLAIM
WHEN OTHER
MOVE '99' TO CA-RETURN-CODE
END-EVALUATE
EXEC CICS Link Program(LGAPVS01)
Commarea(DFHCOMMAREA)
LENGTH(32500)
END-EXEC.
EXEC CICS RETURN END-EXEC.
MAINLINE-EXIT.
EXIT.
INSERT-POLICY.
MOVE CA-BROKERID TO DB2-BROKERID-INT
MOVE CA-PAYMENT TO DB2-PAYMENT-INT
MOVE ' INSERT POLICY' TO EM-SQLREQ
EXEC SQL
INSERT INTO POLICY
( POLICYNUMBER,
CUSTOMERNUMBER,
ISSUEDATE,
EXPIRYDATE,
POLICYTYPE,
LASTCHANGED,
BROKERID,
BROKERSREFERENCE,
PAYMENT           )
VALUES ( DEFAULT,
:DB2-CUSTOMERNUM-INT,
:CA-ISSUE-DATE,
:CA-EXPIRY-DATE,
:DB2-POLICYTYPE,
CURRENT TIMESTAMP,
:DB2-BROKERID-INT,
:CA-BROKERSREF,
:DB2-PAYMENT-INT      )
END-EXEC
Evaluate SQLCODE
When 0
MOVE '00' TO CA-RETURN-CODE
When -530
MOVE '70' TO CA-RETURN-CODE
PERFORM WRITE-ERROR-MESSAGE
EXEC CICS RETURN END-EXEC
When Other
MOVE '90' TO CA-RETURN-CODE
PERFORM WRITE-ERROR-MESSAGE
EXEC CICS RETURN END-EXEC
END-Evaluate.
EXEC SQL
SET :DB2-POLICYNUM-INT = IDENTITY_VAL_LOCAL()
END-EXEC
MOVE DB2-POLICYNUM-INT TO CA-POLICY-NUM
MOVE CA-POLICY-NUM TO EM-POLNUM
EXEC SQL
SELECT LASTCHANGED
INTO :CA-LASTCHANGED
FROM POLICY
WHERE POLICYNUMBER = :DB2-POLICYNUM-INT
END-EXEC.
EXIT.
INSERT-ENDOW.
MOVE CA-E-TERM        TO DB2-E-TERM-SINT
MOVE CA-E-SUM-ASSURED TO DB2-E-SUMASSURED-INT
MOVE ' INSERT ENDOW ' TO EM-SQLREQ
SUBTRACT WS-REQUIRED-CA-LEN FROM EIBCALEN
GIVING WS-VARY-LEN
IF WS-VARY-LEN IS GREATER THAN ZERO
MOVE CA-E-PADDING-DATA
TO WS-VARY-CHAR(1:WS-VARY-LEN)
EXEC SQL
INSERT INTO ENDOWMENT
( POLICYNUMBER,
WITHPROFITS,
EQUITIES,
MANAGEDFUND,
FUNDNAME,
TERM,
SUMASSURED,
LIFEASSURED,
PADDINGDATA    )
VALUES ( :DB2-POLICYNUM-INT,
:CA-E-WITH-PROFITS,
:CA-E-EQUITIES,
:CA-E-MANAGED-FUND,
:CA-E-FUND-NAME,
:DB2-E-TERM-SINT,
:DB2-E-SUMASSURED-INT,
:CA-E-LIFE-ASSURED,
:WS-VARY-FIELD )
END-EXEC
ELSE
EXEC SQL
INSERT INTO ENDOWMENT
( POLICYNUMBER,
WITHPROFITS,
EQUITIES,
MANAGEDFUND,
FUNDNAME,
TERM,
SUMASSURED,
LIFEASSURED    )
VALUES ( :DB2-POLICYNUM-INT,
:CA-E-WITH-PROFITS,
:CA-E-EQUITIES,
:CA-E-MANAGED-FUND,
:CA-E-FUND-NAME,
:DB2-E-TERM-SINT,
:DB2-E-SUMASSURED-INT,
:CA-E-LIFE-ASSURED )
END-EXEC
END-IF
IF SQLCODE NOT EQUAL 0
MOVE '90' TO CA-RETURN-CODE
PERFORM WRITE-ERROR-MESSAGE
EXEC CICS ABEND ABCODE('LGSQ') NODUMP END-EXEC
EXEC CICS RETURN END-EXEC
END-IF.
EXIT.
INSERT-HOUSE.
MOVE CA-H-VALUE       TO DB2-H-VALUE-INT
MOVE CA-H-BEDROOMS    TO DB2-H-BEDROOMS-SINT
MOVE ' INSERT HOUSE ' TO EM-SQLREQ
EXEC SQL
INSERT INTO HOUSE
( POLICYNUMBER,
PROPERTYTYPE,
BEDROOMS,
VALUE,
HOUSENAME,
HOUSENUMBER,
POSTCODE          )
VALUES ( :DB2-POLICYNUM-INT,
:CA-H-PROPERTY-TYPE,
:DB2-H-BEDROOMS-SINT,
:DB2-H-VALUE-INT,
:CA-H-HOUSE-NAME,
:CA-H-HOUSE-NUMBER,
:CA-H-POSTCODE      )
END-EXEC
IF SQLCODE NOT EQUAL 0
MOVE '90' TO CA-RETURN-CODE
PERFORM WRITE-ERROR-MESSAGE
EXEC CICS ABEND ABCODE('LGSQ') NODUMP END-EXEC
EXEC CICS RETURN END-EXEC
END-IF.
EXIT.
INSERT-MOTOR.
MOVE CA-M-VALUE       TO DB2-M-VALUE-INT
MOVE CA-M-CC          TO DB2-M-CC-SINT
MOVE CA-M-PREMIUM     TO DB2-M-PREMIUM-INT
MOVE CA-M-ACCIDENTS   TO DB2-M-ACCIDENTS-INT
MOVE ' INSERT MOTOR ' TO EM-SQLREQ
EXEC SQL
INSERT INTO MOTOR
( POLICYNUMBER,
MAKE,
MODEL,
VALUE,
REGNUMBER,
COLOUR,
CC,
YEAROFMANUFACTURE,
PREMIUM,
ACCIDENTS )
VALUES ( :DB2-POLICYNUM-INT,
:CA-M-MAKE,
:CA-M-MODEL,
:DB2-M-VALUE-INT,
:CA-M-REGNUMBER,
:CA-M-COLOUR,
:DB2-M-CC-SINT,
:CA-M-MANUFACTURED,
:DB2-M-PREMIUM-INT,
:DB2-M-ACCIDENTS-INT )
END-EXEC
IF SQLCODE NOT EQUAL 0
MOVE '90' TO CA-RETURN-CODE
PERFORM WRITE-ERROR-MESSAGE
EXEC CICS ABEND ABCODE('LGSQ') NODUMP END-EXEC
EXEC CICS RETURN END-EXEC
END-IF.
EXIT.
INSERT-COMMERCIAL.
MOVE CA-B-FirePeril       To DB2-B-FirePeril-Int
MOVE CA-B-FirePremium     To DB2-B-FirePremium-Int
MOVE CA-B-CrimePeril      To DB2-B-CrimePeril-Int
MOVE CA-B-CrimePremium    To DB2-B-CrimePremium-Int
MOVE CA-B-FloodPeril      To DB2-B-FloodPeril-Int
MOVE CA-B-FloodPremium    To DB2-B-FloodPremium-Int
MOVE CA-B-WeatherPeril    To DB2-B-WeatherPeril-Int
MOVE CA-B-WeatherPremium  To DB2-B-WeatherPremium-Int
MOVE CA-B-Status          To DB2-B-Status-Int
MOVE ' INSERT COMMER' TO EM-SQLREQ
EXEC SQL
INSERT INTO COMMERCIAL
(
PolicyNumber,
RequestDate,
StartDate,
RenewalDate,
Address,
Zipcode,
LatitudeN,
LongitudeW,
Customer,
PropertyType,
FirePeril,
FirePremium,
CrimePeril,
CrimePremium,
FloodPeril,
FloodPremium,
WeatherPeril,
WeatherPremium,
Status,
RejectionReason
)
VALUES (
:DB2-POLICYNUM-INT,
:CA-LASTCHANGED,
:CA-ISSUE-DATE,
:CA-EXPIRY-DATE,
:CA-B-Address,
:CA-B-Postcode,
:CA-B-Latitude,
:CA-B-Longitude,
:CA-B-Customer,
:CA-B-PropType,
:DB2-B-FirePeril-Int,
:DB2-B-FirePremium-Int,
:DB2-B-CrimePeril-Int,
:DB2-B-CrimePremium-Int,
:DB2-B-FloodPeril-Int,
:DB2-B-FloodPremium-Int,
:DB2-B-WeatherPeril-Int,
:DB2-B-WeatherPremium-Int,
:DB2-B-Status-Int,
:CA-B-RejectReason
)
END-EXEC
IF SQLCODE NOT EQUAL 0
MOVE '90' TO CA-RETURN-CODE
PERFORM WRITE-ERROR-MESSAGE
EXEC CICS ABEND ABCODE('LGSQ') NODUMP END-EXEC
EXEC CICS RETURN END-EXEC
END-IF.
EXIT.
INSERT-CLAIM.
MOVE CA-C-Paid            To DB2-C-Paid-INT
MOVE CA-C-Value           To DB2-C-Value-INT
MOVE ' INSERT CLAIM' TO EM-SQLREQ
EXEC SQL
INSERT INTO CLAIM
(
ClaimNumber,
PolicyNumber,
ClaimDate,
Paid,
Value,
Cause,
Observations
)
VALUES (
:DB2-C-Num-Int,
:DB2-C-Policynum-Int,
:CA-C-Date,
:DB2-C-Paid-Int,
:DB2-C-Value-Int,
:CA-C-Cause,
:CA-C-Observations
)
END-EXEC
Move DB2-C-Num-Int    To CA-C-Num
IF SQLCODE NOT EQUAL 0
MOVE '90' TO CA-RETURN-CODE
PERFORM WRITE-ERROR-MESSAGE
EXEC CICS ABEND ABCODE('LGSQ') NODUMP END-EXEC
EXEC CICS RETURN END-EXEC
END-IF.
EXIT.
WRITE-ERROR-MESSAGE.
MOVE SQLCODE TO EM-SQLRC
EXEC CICS ASKTIME ABSTIME(ABS-TIME)
END-EXEC
EXEC CICS FORMATTIME ABSTIME(ABS-TIME)
MMDDYYYY(DATE1)
TIME(TIME1)
END-EXEC
MOVE DATE1 TO EM-DATE
MOVE TIME1 TO EM-TIME
EXEC CICS LINK PROGRAM('LGSTSQ')
COMMAREA(ERROR-MSG)
LENGTH(LENGTH OF ERROR-MSG)
END-EXEC.
IF EIBCALEN > 0 THEN
IF EIBCALEN < 91 THEN
MOVE DFHCOMMAREA(1:EIBCALEN) TO CA-DATA
EXEC CICS LINK PROGRAM('LGSTSQ')
COMMAREA(CA-ERROR-MSG)
LENGTH(LENGTH OF CA-ERROR-MSG)
END-EXEC
ELSE
MOVE DFHCOMMAREA(1:90) TO CA-DATA
EXEC CICS LINK PROGRAM('LGSTSQ')
COMMAREA(CA-ERROR-MSG)
LENGTH(LENGTH OF CA-ERROR-MSG)
END-EXEC
END-IF
END-IF.
EXIT.