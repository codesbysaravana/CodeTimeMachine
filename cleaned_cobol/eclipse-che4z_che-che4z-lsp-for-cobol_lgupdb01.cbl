PROCESS SQL
IDENTIFICATION DIVISION.
PROGRAM-ID. LGUPDB01.
ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
DATA DIVISION.
WORKING-STORAGE SECTION.
01  WS-HEADER.
03 WS-EYECATCHER            PIC X(16)
VALUE 'LGUPDB01------WS'.
03 WS-TRANSID               PIC X(4).
03 WS-TERMID                PIC X(4).
03 WS-TASKNUM               PIC 9(7).
03 WS-FILLER                PIC X.
03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
03 WS-CALEN                 PIC S9(4) COMP.
03 WS-RETRY                 PIC X.
01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
01  WS-TIME                     PIC X(8)  VALUE SPACES.
01  WS-DATE                     PIC X(10) VALUE SPACES.
01  ERROR-MSG.
03 EM-DATE                  PIC X(8)  VALUE SPACES.
03 FILLER                   PIC X     VALUE SPACES.
03 EM-TIME                  PIC X(6)  VALUE SPACES.
03 FILLER                   PIC X(9)  VALUE ' LGUPDB01'.
03 EM-VARIABLE.
05 FILLER                 PIC X(6)  VALUE ' CNUM='.
05 EM-CUSNUM              PIC X(10)  VALUE SPACES.
05 FILLER                 PIC X(6)  VALUE ' PNUM='.
05 EM-POLNUM              PIC X(10)  VALUE SPACES.
05 EM-SQLREQ              PIC X(16) VALUE SPACES.
05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
01  CA-ERROR-MSG.
03 FILLER                   PIC X(9)  VALUE 'COMMAREA='.
03 CA-DATA                  PIC X(90) VALUE SPACES.
01  WS-COMMAREA-LENGTHS.
03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +28.
03 WS-REQUIRED-CA-LEN       PIC S9(4) COMP VALUE +0.
01 WS-VARY-FIELD.
49 WS-VARY-LEN               PIC S9(4) COMP.
49 WS-VARY-CHAR              PIC X(3900).
01 DB2-IN-INTEGERS.
03 DB2-CUSTOMERNUM-INT       PIC S9(9) COMP.
03 DB2-POLICYNUM-INT         PIC S9(9) COMP.
03 DB2-BROKERID-INT          PIC S9(9) COMP.
03 DB2-PAYMENT-INT           PIC S9(9) COMP.
03 DB2-E-TERM-SINT           PIC S9(4) COMP.
03 DB2-E-SUMASSURED-INT      PIC S9(9) COMP.
03 DB2-H-BEDROOMS-SINT       PIC S9(4) COMP.
03 DB2-H-VALUE-INT           PIC S9(9) COMP.
03 DB2-M-VALUE-INT           PIC S9(9) COMP.
03 DB2-M-CC-SINT             PIC S9(4) COMP.
03 DB2-M-PREMIUM-INT         PIC S9(9) COMP.
03 DB2-M-ACCIDENTS-INT       PIC S9(9) COMP.
EXEC SQL
INCLUDE LGPOLICY
END-EXEC.
77  IND-BROKERID                PIC S9(4) COMP.
77  IND-BROKERSREF              PIC S9(4) COMP.
77  IND-PAYMENT                 PIC S9(4) COMP.
77  LGUPVS01                    Pic X(8) value 'LGUPVS01'.
EXEC SQL
INCLUDE SQLCA
END-EXEC.
EXEC SQL
DECLARE POLICY_CURSOR CURSOR WITH HOLD FOR
SELECT ISSUEDATE,
EXPIRYDATE,
LASTCHANGED,
BROKERID,
BROKERSREFERENCE
FROM POLICY
WHERE ( CUSTOMERNUMBER = :DB2-CUSTOMERNUM-INT AND
POLICYNUMBER = :DB2-POLICYNUM-INT )
FOR UPDATE OF ISSUEDATE,
EXPIRYDATE,
LASTCHANGED,
BROKERID,
BROKERSREFERENCE
END-EXEC.
LINKAGE SECTION.
01  DFHCOMMAREA.
EXEC SQL
INCLUDE LGCMAREA
END-EXEC.
PROCEDURE DIVISION.
MAINLINE SECTION.
INITIALIZE WS-HEADER.
MOVE EIBTRNID TO WS-TRANSID.
MOVE EIBTRMID TO WS-TERMID.
MOVE EIBTASKN TO WS-TASKNUM.
MOVE SPACES   TO WS-RETRY.
INITIALIZE DB2-POLICY.
INITIALIZE DB2-IN-INTEGERS.
IF EIBCALEN IS EQUAL TO ZERO
MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
PERFORM WRITE-ERROR-MESSAGE
EXEC CICS ABEND ABCODE('LGCA') NODUMP END-EXEC
END-IF
MOVE '00' TO CA-RETURN-CODE
MOVE EIBCALEN TO WS-CALEN.
SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
MOVE CA-CUSTOMER-NUM TO DB2-CUSTOMERNUM-INT
MOVE CA-POLICY-NUM   TO DB2-POLICYNUM-INT
MOVE CA-CUSTOMER-NUM TO EM-CUSNUM
MOVE CA-POLICY-NUM   TO EM-POLNUM
PERFORM UPDATE-POLICY-DB2-INFO.
EXEC CICS LINK Program(LGUPVS01)
Commarea(DFHCOMMAREA)
LENGTH(225)
END-EXEC.
END-PROGRAM.
EXEC CICS RETURN END-EXEC.
MAINLINE-EXIT.
EXIT.
FETCH-DB2-POLICY-ROW.
MOVE ' FETCH  ROW   ' TO EM-SQLREQ
EXEC SQL
FETCH POLICY_CURSOR
INTO  :DB2-ISSUEDATE,
:DB2-EXPIRYDATE,
:DB2-LASTCHANGED,
:DB2-BROKERID-INT INDICATOR :IND-BROKERID,
:DB2-BROKERSREF INDICATOR :IND-BROKERSREF,
:DB2-PAYMENT-INT INDICATOR :IND-PAYMENT
END-EXEC
EXIT.
UPDATE-POLICY-DB2-INFO.
MOVE ' OPEN   PCURSOR ' TO EM-SQLREQ
EXEC SQL
OPEN POLICY_CURSOR
END-EXEC
Evaluate SQLCODE
When 0
MOVE '00' TO CA-RETURN-CODE
When -913
MOVE '90' TO CA-RETURN-CODE
PERFORM WRITE-ERROR-MESSAGE
EXEC CICS RETURN END-EXEC
When Other
MOVE '90' TO CA-RETURN-CODE
PERFORM WRITE-ERROR-MESSAGE
EXEC CICS RETURN END-EXEC
END-Evaluate.
PERFORM FETCH-DB2-POLICY-ROW
IF SQLCODE = 0
IF CA-LASTCHANGED EQUAL TO DB2-LASTCHANGED
EVALUATE CA-REQUEST-ID
WHEN '01UEND'
PERFORM UPDATE-ENDOW-DB2-INFO
WHEN '01UHOU'
PERFORM UPDATE-HOUSE-DB2-INFO
WHEN '01UMOT'
PERFORM UPDATE-MOTOR-DB2-INFO
END-EVALUATE
IF CA-RETURN-CODE NOT EQUAL '00'
PERFORM CLOSE-PCURSOR
EXEC CICS RETURN END-EXEC
END-IF
MOVE CA-BROKERID      TO DB2-BROKERID-INT
MOVE CA-PAYMENT       TO DB2-PAYMENT-INT
MOVE ' UPDATE POLICY  ' TO EM-SQLREQ
EXEC SQL
UPDATE POLICY
SET ISSUEDATE        = :CA-ISSUE-DATE,
EXPIRYDATE       = :CA-EXPIRY-DATE,
LASTCHANGED      = CURRENT TIMESTAMP ,
BROKERID         = :DB2-BROKERID-INT,
BROKERSREFERENCE = :CA-BROKERSREF
WHERE CURRENT OF POLICY_CURSOR
END-EXEC
EXEC SQL
SELECT LASTCHANGED
INTO :CA-LASTCHANGED
FROM POLICY
WHERE POLICYNUMBER = :DB2-POLICYNUM-INT
END-EXEC
IF SQLCODE NOT EQUAL 0
EXEC CICS SYNCPOINT ROLLBACK END-EXEC
MOVE '90' TO CA-RETURN-CODE
PERFORM WRITE-ERROR-MESSAGE
END-IF
ELSE
MOVE '02' TO CA-RETURN-CODE
END-IF
ELSE
IF SQLCODE EQUAL 100
MOVE '01' TO CA-RETURN-CODE
ELSE
MOVE '90' TO CA-RETURN-CODE
PERFORM WRITE-ERROR-MESSAGE
END-IF
END-IF.
PERFORM CLOSE-PCURSOR.
CLOSE-PCURSOR.
MOVE ' CLOSE  PCURSOR' TO EM-SQLREQ
EXEC SQL
CLOSE POLICY_CURSOR
END-EXEC.
Evaluate SQLCODE
When 0
MOVE '00' TO CA-RETURN-CODE
When -501
MOVE '00' TO CA-RETURN-CODE
MOVE '-501 detected c' TO EM-SQLREQ
EXEC CICS RETURN END-EXEC
When Other
MOVE '90' TO CA-RETURN-CODE
PERFORM WRITE-ERROR-MESSAGE
EXEC CICS RETURN END-EXEC
END-Evaluate.
EXIT.
UPDATE-ENDOW-DB2-INFO.
MOVE CA-E-TERM        TO DB2-E-TERM-SINT
MOVE CA-E-SUM-ASSURED TO DB2-E-SUMASSURED-INT
MOVE ' UPDATE ENDOW ' TO EM-SQLREQ
SUBTRACT WS-REQUIRED-CA-LEN FROM EIBCALEN
GIVING WS-VARY-LEN
IF WS-VARY-LEN IS GREATER THAN ZERO
MOVE CA-E-PADDING-DATA
TO WS-VARY-CHAR(1:WS-VARY-LEN)
EXEC SQL
UPDATE ENDOWMENT
SET
WITHPROFITS   = :CA-E-WITH-PROFITS,
EQUITIES    = :CA-E-EQUITIES,
MANAGEDFUND = :CA-E-MANAGED-FUND,
FUNDNAME    = :CA-E-FUND-NAME,
TERM        = :DB2-E-TERM-SINT,
SUMASSURED  = :DB2-E-SUMASSURED-INT,
LIFEASSURED = :CA-E-LIFE-ASSURED
WHERE
POLICYNUMBER = :DB2-POLICYNUM-INT
END-EXEC
ELSE
EXEC SQL
UPDATE ENDOWMENT
SET
WITHPROFITS   = :CA-E-WITH-PROFITS,
EQUITIES    = :CA-E-EQUITIES,
MANAGEDFUND = :CA-E-MANAGED-FUND,
FUNDNAME    = :CA-E-FUND-NAME,
TERM        = :DB2-E-TERM-SINT,
SUMASSURED  = :DB2-E-SUMASSURED-INT,
LIFEASSURED = :CA-E-LIFE-ASSURED
WHERE
POLICYNUMBER = :DB2-POLICYNUM-INT
END-EXEC
IF SQLCODE NOT EQUAL 0
IF SQLCODE EQUAL 100
MOVE '01' TO CA-RETURN-CODE
ELSE
MOVE '90' TO CA-RETURN-CODE
PERFORM WRITE-ERROR-MESSAGE
END-IF
END-IF.
EXIT.
UPDATE-HOUSE-DB2-INFO.
MOVE CA-H-BEDROOMS    TO DB2-H-BEDROOMS-SINT
MOVE CA-H-VALUE       TO DB2-H-VALUE-INT
MOVE ' UPDATE HOUSE ' TO EM-SQLREQ
EXEC SQL
UPDATE HOUSE
SET
PROPERTYTYPE = :CA-H-PROPERTY-TYPE,
BEDROOMS     = :DB2-H-BEDROOMS-SINT,
VALUE        = :DB2-H-VALUE-INT,
HOUSENAME    = :CA-H-HOUSE-NAME,
HOUSENUMBER  = :CA-H-HOUSE-NUMBER,
POSTCODE     = :CA-H-POSTCODE
WHERE
POLICYNUMBER = :DB2-POLICYNUM-INT
END-EXEC
IF SQLCODE NOT EQUAL 0
IF SQLCODE = 100
MOVE '01' TO CA-RETURN-CODE
ELSE
MOVE '01' TO CA-RETURN-CODE
PERFORM WRITE-ERROR-MESSAGE
END-IF
END-IF.
EXIT.
UPDATE-MOTOR-DB2-INFO.
MOVE CA-M-CC          TO DB2-M-CC-SINT
MOVE CA-M-VALUE       TO DB2-M-VALUE-INT
MOVE CA-M-PREMIUM     TO DB2-M-PREMIUM-INT
MOVE CA-M-ACCIDENTS   TO DB2-M-ACCIDENTS-INT
MOVE ' UPDATE MOTOR ' TO EM-SQLREQ
EXEC SQL
UPDATE MOTOR
SET
MAKE              = :CA-M-MAKE,
MODEL             = :CA-M-MODEL,
VALUE             = :DB2-M-VALUE-INT,
REGNUMBER         = :CA-M-REGNUMBER,
COLOUR            = :CA-M-COLOUR,
CC                = :DB2-M-CC-SINT,
YEAROFMANUFACTURE = :CA-M-MANUFACTURED,
PREMIUM           = :DB2-M-PREMIUM-INT,
ACCIDENTS         = :DB2-M-ACCIDENTS-INT
WHERE
POLICYNUMBER      = :DB2-POLICYNUM-INT
END-EXEC
IF SQLCODE NOT EQUAL 0
IF SQLCODE EQUAL 100
MOVE '01' TO CA-RETURN-CODE
ELSE
MOVE '90' TO CA-RETURN-CODE
PERFORM WRITE-ERROR-MESSAGE
END-IF
END-IF.
EXIT.
WRITE-ERROR-MESSAGE.
MOVE SQLCODE TO EM-SQLRC
EXEC CICS ASKTIME ABSTIME(WS-ABSTIME)
END-EXEC
EXEC CICS FORMATTIME ABSTIME(WS-ABSTIME)
MMDDYYYY(WS-DATE)
TIME(WS-TIME)
END-EXEC
MOVE WS-DATE TO EM-DATE
MOVE WS-TIME TO EM-TIME
EXEC CICS LINK PROGRAM('LGSTSQ')
COMMAREA(ERROR-MSG)
LENGTH(LENGTH OF ERROR-MSG)
END-EXEC.
IF EIBCALEN > 0 THEN
IF EIBCALEN < 91 THEN
MOVE DFHCOMMAREA(1:EIBCALEN) TO CA-DATA
EXEC CICS LINK PROGRAM('LGSTSQ')
COMMAREA(CA-ERROR-MSG)
LENGTH(LENGTH OF CA-ERROR-MSG)
END-EXEC
ELSE
MOVE DFHCOMMAREA(1:90) TO CA-DATA
EXEC CICS LINK PROGRAM('LGSTSQ')
COMMAREA(CA-ERROR-MSG)
LENGTH(LENGTH OF CA-ERROR-MSG)
END-EXEC
END-IF
END-IF.
EXIT.